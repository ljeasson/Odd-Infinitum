<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Upgrade Items

// Set Margins
right_margin = 192;
left_margin = room_width - 192;

// Create Player
instance_create(room_width/2-24, room_height/2+16, obj_Player);

// Create Done Button
instance_create(left_margin + 40, room_height - 80, obj_Done);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Text and Sprites

// Draw Text and Buttons on Left Margin
draw_set_colour(c_white);
draw_set_font(UI_Font_Large);
draw_set_halign(fa_center);
draw_set_valign(fa_top);

// Move
draw_text(right_margin, 128, "MOVE");
if (gamepad_is_connected(0) &amp;&amp; gamepad_is_supported())
    draw_sprite(spr_Controller_Stick_L, 0, right_margin, 128 + 96)
else
{
    draw_sprite(spr_Up, 0, right_margin, 128 + 96)
    draw_sprite(spr_Down, 0, right_margin, 128 + 144)
    draw_sprite(spr_Left, 0, right_margin - 48, 128 + 144)
    draw_sprite(spr_Right, 0, right_margin + 48, 128 + 144)
}
    
// Laser
draw_text(right_margin, 320, "LASER");
if (gamepad_is_connected(0) &amp;&amp; gamepad_is_supported())
    draw_sprite(spr_Controller_A, 0, right_margin, 320 + 96)
else
    draw_sprite(spr_Button_Blank, 0, right_margin, 320 + 96)

// Alt Laser
draw_text(right_margin, 512, "ALT LASER");
if (gamepad_is_connected(0) &amp;&amp; gamepad_is_supported())
    draw_sprite(spr_Controller_B, 0, right_margin, 512 + 96)
else
    draw_sprite(spr_G, 0, right_margin, 512 + 96)

    
// Missile
draw_text(left_margin, 128, "MISSILE");
if (gamepad_is_connected(0) &amp;&amp; gamepad_is_supported())
    draw_sprite(spr_Controller_X, 0, left_margin, 128 + 96)
else
    draw_sprite(spr_F, 0, left_margin, 128 + 96)

// Speed Boost
draw_text(left_margin, 320, "SPEED BOOST");
if (gamepad_is_connected(0) &amp;&amp; gamepad_is_supported())
    draw_sprite(spr_Controller_RT, 0, left_margin, 320 + 96)
else
    draw_sprite(spr_Shift, 0, left_margin, 320 + 96)

// Missile Regain
draw_text(left_margin, 512, "MISSILE RELOAD");
if (gamepad_is_connected(0) &amp;&amp; gamepad_is_supported())
    draw_sprite(spr_Controller_Y, 0, left_margin, 512 + 96)
else
    draw_sprite(spr_R, 0, left_margin, 512 + 96)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
